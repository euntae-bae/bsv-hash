/*
 * Generated by Bluespec Compiler, version 2022.01-29-gc526ff54 (build c526ff54)
 * 
 * On Wed Nov 30 19:24:30 KST 2022
 * 
 */

/* Generation options: */
#ifndef __mkTb_h__
#define __mkTb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTb module */
class MOD_mkTb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_done;
  MOD_Reg<tUInt32> INST_fsmCnt;
  MOD_Wire<tUInt8> INST_fsm_abort;
  MOD_Reg<tUInt8> INST_fsm_start_reg;
  MOD_Reg<tUInt8> INST_fsm_start_reg_1;
  MOD_Wire<tUInt8> INST_fsm_start_reg_2;
  MOD_Wire<tUInt8> INST_fsm_start_wire;
  MOD_Reg<tUInt8> INST_fsm_state_can_overlap;
  MOD_Reg<tUInt8> INST_fsm_state_fired;
  MOD_Wire<tUInt8> INST_fsm_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_fsm_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_fsm_state_overlap_pw;
  MOD_Wire<tUInt8> INST_fsm_state_set_pw;
  MOD_Reg<tUInt32> INST_hash;
  MOD_Reg<tUInt32> INST_val;
 
 /* Constructor */
 public:
  MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l119c9;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l118c14;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l117c13;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l116c13;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l115c13;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l114c13;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l110c9;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l106c9;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l100c9;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l91c9;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l90c13;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l89c13;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l88c13;
  tUInt8 DEF_WILL_FIRE_RL_fsm_action_l87c13;
  tUInt32 DEF_b__h26672;
  tUInt32 DEF_k__h26496;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h26692;
  tUInt64 DEF_v__h26568;
  tUInt64 DEF_v__h26478;
  tUInt64 DEF_v__h26356;
  tUInt64 DEF_v__h26293;
  tUInt32 DEF_va__h24058;
  tUInt32 DEF_key__h26501;
  tUInt32 DEF_b__h24075;
  tUInt32 DEF_b__h24066;
  tUInt32 DEF_a__h24072;
  tUInt64 DEF_val_6_MUL_0xCC9E2D51___d47;
  tUInt32 DEF_c__h24069;
  tUInt8 DEF_hash_5_MINUS_0x30405060_3_BITS_25_TO_19___d68;
  tUInt32 DEF_hash_5_MINUS_0x30405060___d63;
  tUInt8 DEF_hash_5_MINUS_0x30405060_3_BITS_8_TO_2___d80;
  tUInt8 DEF_hash_5_MINUS_0x30405060_3_BITS_15_TO_11___d76;
  tUInt8 DEF_hash_5_MINUS_0x30405060_3_BIT_17___d72;
  tUInt8 DEF_INV_hash_5_MINUS_0x30405060_3_BITS_10_TO_9_7___d78;
  tUInt8 DEF_INV_hash_5_MINUS_0x30405060_3_BITS_1_TO_0_1___d82;
  tUInt8 DEF_INV_hash_5_MINUS_0x30405060_3_BIT_16_3___d74;
  tUInt8 DEF_INV_hash_5_MINUS_0x30405060_3_BIT_18_9___d70;
  tUInt32 DEF_key__h26500;
  tUInt32 DEF_x__h24047;
  tUInt32 DEF_c__h24077;
  tUInt32 DEF_n__h24357;
  tUInt32 DEF_b__h24074;
  tUInt32 DEF_n__h24311;
  tUInt32 DEF_a__h24071;
  tUInt32 DEF_n__h24265;
  tUInt32 DEF_c__h24068;
  tUInt32 DEF_n__h24219;
  tUInt32 DEF_b__h24065;
  tUInt32 DEF_n__h24173;
  tUInt32 DEF_a__h24063;
  tUInt32 DEF_c__h24073;
  tUInt32 DEF_b__h24070;
  tUInt32 DEF_a__h24067;
  tUInt32 DEF_x__h23507;
  tUInt32 DEF_a__h23536;
  tUInt8 DEF_hash_5_MINUS_0x30405060_3_BITS_31_TO_27_4_CONC_ETC___d67;
 
 /* Rules */
 public:
  void RL_fsm_start_reg__dreg_update();
  void RL_fsm_state_handle_abort();
  void RL_fsm_state_fired__dreg_update();
  void RL_fsm_state_every();
  void RL_fsm_restart();
  void RL_fsm_action_l87c13();
  void RL_fsm_action_l88c13();
  void RL_fsm_action_l89c13();
  void RL_fsm_action_l90c13();
  void RL_fsm_action_l91c9();
  void RL_fsm_action_l100c9();
  void RL_fsm_action_l106c9();
  void RL_fsm_action_l110c9();
  void RL_fsm_action_l114c13();
  void RL_fsm_action_l115c13();
  void RL_fsm_action_l116c13();
  void RL_fsm_action_l117c13();
  void RL_fsm_action_l118c14();
  void RL_fsm_action_l119c9();
  void RL_fsm_idle_l86c17();
  void RL_fsm_fsm_start();
  void RL_rl_start();
  void RL_rl_step();
  void RL_rl_done();
  void RL_rl_finish();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
  void __me_check_14();
  void __me_check_15();
  void __me_check_16();
  void __me_check_17();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTb &backing);
};

#endif /* ifndef __mkTb_h__ */
